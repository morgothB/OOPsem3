package testingfiles;

import java.util.*;

/*
    Про то, что сверху прочитаешь, когда будет нужно.
*/

public class PrimeNumbersPrinter /*
                                Имя класса должно быть существительным, набранным в смешанном регистре с первым
                                символом каждого слова в верхнем регистре. Старайтесь сохранить имя вашего класса
                                простым и наглядным. Используйте целые слова - избегайте сокращений и аббревиатур
                                (не считая аббревиатур, использующихся чаще своих длинных форм, таких как URL и HTML).
                                Шо делает класс? Печатает простые числа, то и написано.
                                */
{

    public static void main(String[] args) /*

                                            */
    {
        int n = (new Scanner(System.in).nextInt()) + 1;
        /*
        int n - это ты объявила переменную, ясно
        теперь ты туда кладёшь суммму 2 слагаемых:
            * 1 - пнятненько (тебе да, а вот мне уже нет, там всё сложно, для тебя число, потом расскажем точно)
            * new Scanner(System.in).nextInt() разбираем. Ну, во-первых, Scanner(System.in) - это объект класса Scanner,
              собсна строчка
        */

                                    Scanner input = new Scanner(System.in);

        /*
             есть ни что иное, как объявление переменной типа Scanner с именем "input"  и оператором присваивания "="
             проинициализировать её тем, что вернул ему конструктор класса Scanner, а вернул он как раз объект класса
             Scanner. new - ключевое слово. Это на самом деле оператор, динамически выделяющий память, тоже всё не так
             просто, ну да ладно.
             Итак, щас ч есть:
                 *int n  - переменная типа int
                 * "=" - оператор присваивания
                 * new - оператор выделения памяти
                 * Scanner(System.in) - объект класса Scanner
                 * System(in) шо такое. Выделяем System.in, шёлкаем ctrl+B, магия, видим страшное

                                    public static final InputStream in = null;

                   в классе System. Это таки тоже переменная, узнаешь ключевые слова - распарсишь что это.
             тэк, найс, распарсили. Собственно теперь без задней мысли вызываем метод nextInt() класса Scanner, он
             возвращает int, срабатываеет оператор "=", все счастливы.
         */
        boolean[] isNotPrime = new boolean[n]; //имя переменной делать надо таким. Всем похуй, но делать надо так, плз
        /*
            Щас будет легче, уже всё проходили. boolean - эт конечно примитив, а вот boolean[] - это массив boolean'ов,
            т.е. уже тоже объект, а не примитив. Ваще, в джаве объект это попросту всё, в т.ч. ссылка на методы и прочее,
            потом расшаришь. собственно если написать
        */
                                                    int[] a;
                                                    a = new int[2];
        /*
            то всё отлично робит. Собственно boolean[n] уже опять-таки инициализирует этот объект, для массивов
            примитивов это все значения заполнить нулями, для массивов объектов типа
        */
                                                Scanner[] ee = new Scanner[1];
        /*
            заполняет все элементами значение null, там ведь ссылки, я писал по этому поводу многабукафф. Кстати,
            двукмерные массивы типа
        */
                                            int[][] aa = new int[3][];
        /*
            есть три непроиниуиализированные ссылки. Кароче, это потом распарсишь сама, я помогу
         */
        int res = 0;
        for (int i = 2; i < n; ++i) { //про циклы тоже прочитаешь, ничо сложного, есть отличия от си
            for (int j = i + 1; j < n; ++j) {
                if (j % i == 0) {
                    isNotPrime[i] = true;
                    res++;
                }
            }
        }
        System.out.println("" + res);
        /*
            Всё по новой:
            *  "" + res - объект типа String
            *System.out.println(String ) - метод класса PrintStream, возвращающий void с параметром типа String
            *"public static final PrintStream out = null;" - написано в исходниках java.lang.System. Что это значит
             поймёшь как пройдёшь тему сию
            *Ну и класс System
         */
        for (int i = 2; i < n; ++i){ /*
                О, отличный момент написать про область видимости переменных и прочего счастья. Собственно у переменной
                есть область видимости - условно то, откуда можно получить доступ к переменной. Так вот, переменные,
                объявленные внутри блока инициализации for, то бишь до первой ";" видимы только внутри этого for
                Другими словами, делать так
                                    */
                                            for (int j = 0; ; ) {   int q; break;   }
                                            for (int j = 0; ; ) {   int q; break;   }
                                            for (int j = 0; ; ) {   int q; break;   }

                                    /*можно легко, для каждого for создаётся новая интовая переменная, а старая
                                    уничтожается. То же самое про блоки кода, это которые {} отделяются:
                                    в непересекающихся блоках переменные, объявленные внутри, друг от друга не зависят.
                                    Узнаешь про OOP - там тоже пояснят за область видимости, это почти изи
                                    */
            if (!isNotPrime[i]){
                                /*
                                внутри скобок if должен быть boolean и только он, сишный "if (int a = 0) {}" не
                                скомпилится. При этом следует понимать, что "true" - это тоже вполне boolean
                                */
                                                    if (true) {}
                                /*
                                собственно вот. На деле когда ты пишешь что-то типа "int i = 0;", ты переменную
                                примитива инициализируешь литераллом, а не "что-то куда-то ложишь"
                                */
                System.out.println(i + ""); //уже писал
            }
        }

    }
}


